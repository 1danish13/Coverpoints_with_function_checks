#######################################################################################################################################################################################################
# These coverpoints belongs to the test plan for RISC-V Privilege Arch Compliance developed by 10xEngineers
#######################################################################################################################################################################################################
     
misa:
  config: 
    - check ISA:=regex(.*RV32.*); check ISA:=regex(.*I.*F.*D.*Zicsr.*); check is_implemented(misa) = True; check is_legal_warl(misa, 3, 5) = True;
  mnemonics:
    csrrw: 0
    csrrs: 0
  csr_comb:
	(write_val("misa") & 0x20 == 0) & (old_val("misa") & 0x28 == 0x28) & (misa & 0x28) == 0


misa_mxl_check_32:
  config: 
    - check ISA:=regex(.*RV32.*); check ISA:=regex(.*I.*Zicsr.*); check is_implemented(misa) = True;
  mnemonics: 
    csrrw: 0
    csrrs: 0
  csr_comb:
	misa >> (xlen-2) == 0x01 : 0				# checks whether the mxl field of misa register is 1.
    
    
misa_mxl_check_64:
  config: 
    - check ISA:=regex(.*RV64.*); check ISA:=regex(.*I.*Zicsr.*); check is_implemented(misa) = True;
  mnemonics: 
    csrrw: 0
    csrrs: 0
  csr_comb:
	misa >> (xlen-2) == 0x02 : 0				# checks whether the mxl field of misa register is 2.
    
    
misa_mxl_check_128:
  config: 
    - check ISA:=regex(.*RV128.*); check ISA:=regex(.*I.*Zicsr.*); check is_implemented(misa) = True;
  mnemonics: 
    csrrw: 0
    csrrs: 0
  csr_comb:
	misa >> (xlen-2) == 0x03 : 0				# checks whether the mxl field of misa register is 3.
	
	
misa_Umode:
  config: 
    - check ISA:=regex(.*I.*Zicsr.*U.*); check is_implemented(misa) = True;
  mnemonics: 
    csrrw: 0
    csrrs: 0
  csr_comb:
	(misa >> 20) & 0x01 == 0x01 : 0 			# checking if U bit gets set if there is support for user mode RV32
	
	
misa_Smode:
  config: 
    - check ISA:=regex(.*I.*Zicsr.*S.*); check is_implemented(misa) = True;
  mnemonics: 
    csrrw: 0
    csrrs: 0
  csr_comb:
	(misa >> 18) & 0x01 == 0x01 : 0 			# checking if S bit gets set if there is support for supervisor mode RV32
	
#######################################################################################################################################################################################################

mcause:    
  config: 
    - check ISA:=regex(.*RV32.*); check ISA:=regex(.*I.*Zicsr.*); check is_trap_2_M(mcause) = True;
    - check is_implemented_software(mcause) = True;
  mnemonics: 
    csrrw: 0
    csrrs: 0
  csr_comb:
	(mcause >> 31) & 1 == 1 : 0				# checks if the exception or interrupt was an interrupt 
	(mcause >> 31) & 1 == 0 : 0				# checks if the exception or interrupt was an exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h00 : 0				# Instruction address misaligned exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h01 : 0				# Instruction access fault exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h02 : 0				# Illegal instruction exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h03 : 0				# Breakpoint exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h04 : 0				# Load address misaligned exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h05 : 0				# Load access fault exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h06 : 0				# Store/AMO address misaligned exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h07 : 0				# Store/AMO access fault exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h08 : 0				# Environment call from U-mode exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h0b : 0				# Environment call from M-mode exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h0c : 0				# Instruction page fault exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h0d : 0				# Load page fault exception
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h0f : 0				# Store/AMO page fault exception
	(mcause >> 31) & 1 == 1 && (mcause & 0xff) == 8'h03 : 0				# Machine software interrupt
	(mcause >> 31) & 1 == 1 && (mcause & 0xff) == 8'h07 : 0				# Machine timer interrupt
	(mcause >> 31) & 1 == 1 && (mcause & 0xff) == 8'h0b : 0				# Machine external interrupt
	

mcause_Smode:    
  config: 
    - check ISA:=regex(.*RV32.*); regex(.*I.*Zicsr.*S.*); 
    - check is_implemented_software(mcause) = True;
  mnemonics: 
    csrrw: 0
    csrrs: 0
  csr_comb:
	(mcause >> 31) & 1 == 1 && (mcause & 0xff) == 8'h01 : 0				# Supervisor software interrupt
	(mcause >> 31) & 1 == 1 && (mcause & 0xff) == 8'h05 : 0				# Supervisor timer interrupt
	(mcause >> 31) & 1 == 1 && (mcause & 0xff) == 8'h09 : 0				# Supervisor external interrupt
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h09 : 0				# Environment call from S-mode exception
	
mcause_Umode:    
  config: 
    - check ISA:=regex(.*RV32.*); regex(.*I.*Zicsr.*U.*); 
    - check is_implemented_software(mcause) = True;
  mnemonics: 
    csrrw: 0
    csrrs: 0
  csr_comb:
	(mcause >> 31) & 1 == 0 && (mcause & 0xff) == 8'h08 : 0				# Environment call from U-mode exception

	

